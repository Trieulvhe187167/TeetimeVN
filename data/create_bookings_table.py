#!/usr/bin/env python3
"""
Script ƒë·ªÉ t·∫°o b·∫£ng bookings trong database SQLite
"""

import sqlite3
from pathlib import Path
import sys

# 1) X√°c ƒë·ªãnh ƒë∆∞·ªùng d·∫´n t·ªõi project root v√† file DB
script_path  = Path(__file__).resolve()
project_root = script_path.parent.parent      # n·∫øu script n·∫±m trong th∆∞ m·ª•c data/
DB_PATH      = project_root / "data" / "teetimevn_dev.db"

def create_bookings_table():
    """T·∫°o b·∫£ng bookings v√† c√°c index li√™n quan"""
    
    # Ki·ªÉm tra database c√≥ t·ªìn t·∫°i kh√¥ng
    if not DB_PATH.exists():
        print(f"‚ùå Database kh√¥ng t·ªìn t·∫°i t·∫°i: {DB_PATH}")
        return False
    
    try:
        # K·∫øt n·ªëi database
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        
        print(f"üìÅ K·∫øt n·ªëi database: {DB_PATH}")
        
        # T·∫°o b·∫£ng bookings
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS bookings (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER NOT NULL,
                course_id INTEGER NOT NULL,
                play_date DATE NOT NULL,
                play_time TIME NOT NULL,
                players INTEGER NOT NULL DEFAULT 1,
                has_caddy BOOLEAN DEFAULT 0,
                has_cart BOOLEAN DEFAULT 0,
                has_rent_clubs BOOLEAN DEFAULT 0,
                green_fee REAL NOT NULL,
                services_fee REAL NOT NULL,
                insurance_fee REAL NOT NULL,
                total_amount REAL NOT NULL,
                status VARCHAR(20) DEFAULT 'pending',
                notes TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (user_id) REFERENCES users(id),
                FOREIGN KEY (course_id) REFERENCES golf_course(id)
            )
        """)
        print("‚úÖ T·∫°o b·∫£ng bookings th√†nh c√¥ng")
        
        # T·∫°o c√°c index
        indexes = [
            ("idx_bookings_user_id", "bookings(user_id)"),
            ("idx_bookings_course_id", "bookings(course_id)"),
            ("idx_bookings_play_date", "bookings(play_date)"),
            ("idx_bookings_status", "bookings(status)")
        ]
        
        for index_name, index_def in indexes:
            try:
                cursor.execute(f"CREATE INDEX IF NOT EXISTS {index_name} ON {index_def}")
                print(f"‚úÖ T·∫°o index {index_name}")
            except sqlite3.Error as e:
                print(f"‚ö†Ô∏è  Index {index_name} c√≥ th·ªÉ ƒë√£ t·ªìn t·∫°i: {e}")
        
        # Commit changes
        conn.commit()
        
        # Ki·ªÉm tra b·∫£ng ƒë√£ ƒë∆∞·ª£c t·∫°o
        cursor.execute("""
            SELECT name FROM sqlite_master 
            WHERE type='table' AND name='bookings'
        """)
        if cursor.fetchone():
            print("\n‚ú® B·∫£ng bookings ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng!")
            
            # Hi·ªÉn th·ªã c·∫•u tr√∫c b·∫£ng
            cursor.execute("PRAGMA table_info(bookings)")
            columns = cursor.fetchall()
            print("\nüìã C·∫•u tr√∫c b·∫£ng bookings:")
            print("-" * 60)
            for col in columns:
                print(f"  {col[1]:<20} {col[2]:<15} {'NOT NULL' if col[3] else 'NULL':<10} {f'DEFAULT {col[4]}' if col[4] else ''}")
        
        return True
        
    except sqlite3.Error as e:
        print(f"‚ùå L·ªói SQLite: {e}")
        return False
    except Exception as e:
        print(f"‚ùå L·ªói kh√¥ng x√°c ƒë·ªãnh: {e}")
        return False
    finally:
        if conn:
            conn.close()
            print("\nüîí ƒê√£ ƒë√≥ng k·∫øt n·ªëi database")

def check_existing_bookings():
    """Ki·ªÉm tra xem b·∫£ng bookings ƒë√£ c√≥ d·ªØ li·ªáu ch∆∞a"""
    try:
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        
        cursor.execute("SELECT COUNT(*) FROM bookings")
        count = cursor.fetchone()[0]
        
        if count > 0:
            print(f"\nüìä B·∫£ng bookings hi·ªán c√≥ {count} b·∫£n ghi")
        else:
            print("\nüìä B·∫£ng bookings hi·ªán ƒëang tr·ªëng")
            
        conn.close()
        return count
    except:
        return 0

if __name__ == "__main__":
    print("üöÄ B·∫Øt ƒë·∫ßu t·∫°o b·∫£ng bookings...")
    print("=" * 60)
    
    if create_bookings_table():
        check_existing_bookings()
        print("\n‚úÖ Ho√†n th√†nh! B·∫£ng bookings ƒë√£ s·∫µn s√†ng s·ª≠ d·ª•ng.")
    else:
        print("\n‚ùå C√≥ l·ªói x·∫£y ra khi t·∫°o b·∫£ng.")