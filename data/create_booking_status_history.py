#!/usr/bin/env python3
"""
Script ƒë·ªÉ t·∫°o b·∫£ng booking_status_history trong database SQLite
B·∫£ng n√†y l∆∞u l·ªãch s·ª≠ thay ƒë·ªïi status c·ªßa c√°c booking
"""

import sqlite3
from pathlib import Path
import sys

# 1) X√°c ƒë·ªãnh ƒë∆∞·ªùng d·∫´n t·ªõi project root v√† file DB
script_path  = Path(__file__).resolve()
project_root = script_path.parent.parent      # n·∫øu script n·∫±m trong th∆∞ m·ª•c data/
DB_PATH      = project_root / "data" / "teetimevn_dev.db"

def create_booking_status_history_table():
    """T·∫°o b·∫£ng booking_status_history v√† index"""
    
    # Ki·ªÉm tra database c√≥ t·ªìn t·∫°i kh√¥ng
    if not DB_PATH.exists():
        print(f"‚ùå Database kh√¥ng t·ªìn t·∫°i t·∫°i: {DB_PATH}")
        return False
    
    try:
        # K·∫øt n·ªëi database
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        
        print(f"üìÅ K·∫øt n·ªëi database: {DB_PATH}")
        
        # Ki·ªÉm tra b·∫£ng bookings c√≥ t·ªìn t·∫°i kh√¥ng
        cursor.execute("""
            SELECT name FROM sqlite_master 
            WHERE type='table' AND name='bookings'
        """)
        if not cursor.fetchone():
            print("‚ùå B·∫£ng 'bookings' ch∆∞a t·ªìn t·∫°i. Vui l√≤ng t·∫°o b·∫£ng bookings tr∆∞·ªõc!")
            return False
        
        # T·∫°o b·∫£ng booking_status_history
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS booking_status_history (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                booking_id INTEGER NOT NULL,
                old_status VARCHAR(20),
                new_status VARCHAR(20),
                changed_by VARCHAR(100),
                notes TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (booking_id) REFERENCES bookings(id)
            )
        """)
        print("‚úÖ T·∫°o b·∫£ng booking_status_history th√†nh c√¥ng")
        
        # T·∫°o index ƒë·ªÉ t·ªëi ∆∞u truy v·∫•n
        try:
            cursor.execute("""
                CREATE INDEX IF NOT EXISTS idx_booking_status_history_booking_id 
                ON booking_status_history(booking_id)
            """)
            print("‚úÖ T·∫°o index idx_booking_status_history_booking_id")
        except sqlite3.Error as e:
            print(f"‚ö†Ô∏è  Index c√≥ th·ªÉ ƒë√£ t·ªìn t·∫°i: {e}")
        
        # Commit changes
        conn.commit()
        
        # Ki·ªÉm tra b·∫£ng ƒë√£ ƒë∆∞·ª£c t·∫°o
        cursor.execute("""
            SELECT name FROM sqlite_master 
            WHERE type='table' AND name='booking_status_history'
        """)
        if cursor.fetchone():
            print("\n‚ú® B·∫£ng booking_status_history ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng!")
            
            # Hi·ªÉn th·ªã c·∫•u tr√∫c b·∫£ng
            cursor.execute("PRAGMA table_info(booking_status_history)")
            columns = cursor.fetchall()
            print("\nüìã C·∫•u tr√∫c b·∫£ng booking_status_history:")
            print("-" * 70)
            print(f"{'Column':<20} {'Type':<20} {'Null':<10} {'Default':<20}")
            print("-" * 70)
            for col in columns:
                col_name = col[1]
                col_type = col[2]
                col_null = "NULL" if not col[3] else "NOT NULL"
                col_default = col[4] if col[4] else ""
                print(f"{col_name:<20} {col_type:<20} {col_null:<10} {col_default:<20}")
            
            # Ki·ªÉm tra foreign key
            cursor.execute("PRAGMA foreign_key_list(booking_status_history)")
            fks = cursor.fetchall()
            if fks:
                print("\nüîó Foreign Keys:")
                for fk in fks:
                    print(f"  - {fk[3]} ‚Üí {fk[2]}.{fk[4]}")
        
        return True
        
    except sqlite3.Error as e:
        print(f"‚ùå L·ªói SQLite: {e}")
        return False
    except Exception as e:
        print(f"‚ùå L·ªói kh√¥ng x√°c ƒë·ªãnh: {e}")
        return False
    finally:
        if conn:
            conn.close()
            print("\nüîí ƒê√£ ƒë√≥ng k·∫øt n·ªëi database")

def check_existing_history():
    """Ki·ªÉm tra xem b·∫£ng booking_status_history ƒë√£ c√≥ d·ªØ li·ªáu ch∆∞a"""
    try:
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        
        # Ki·ªÉm tra s·ªë l∆∞·ª£ng record
        cursor.execute("SELECT COUNT(*) FROM booking_status_history")
        count = cursor.fetchone()[0]
        
        if count > 0:
            print(f"\nüìä B·∫£ng booking_status_history hi·ªán c√≥ {count} b·∫£n ghi")
            
            # Hi·ªÉn th·ªã 5 record m·ªõi nh·∫•t
            cursor.execute("""
                SELECT booking_id, old_status, new_status, changed_by, created_at
                FROM booking_status_history
                ORDER BY created_at DESC
                LIMIT 5
            """)
            recent = cursor.fetchall()
            if recent:
                print("\nüìù 5 thay ƒë·ªïi status g·∫ßn nh·∫•t:")
                print("-" * 80)
                for r in recent:
                    print(f"  Booking #{r[0]}: {r[1]} ‚Üí {r[2]} by {r[3]} at {r[4]}")
        else:
            print("\nüìä B·∫£ng booking_status_history hi·ªán ƒëang tr·ªëng")
            
        conn.close()
        return count
    except Exception as e:
        print(f"‚ö†Ô∏è  Kh√¥ng th·ªÉ ki·ªÉm tra d·ªØ li·ªáu: {e}")
        return 0

def add_sample_data():
    """Th√™m d·ªØ li·ªáu m·∫´u ƒë·ªÉ test (optional)"""
    try:
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        
        # Ki·ªÉm tra c√≥ booking n√†o kh√¥ng
        cursor.execute("SELECT id FROM bookings LIMIT 1")
        booking = cursor.fetchone()
        
        if booking:
            # Th√™m m·ªôt record m·∫´u
            cursor.execute("""
                INSERT INTO booking_status_history 
                (booking_id, old_status, new_status, changed_by, notes)
                VALUES (?, 'pending', 'confirmed', 'admin', 'Test status change')
            """, (booking[0],))
            conn.commit()
            print(f"\n‚úÖ ƒê√£ th√™m d·ªØ li·ªáu m·∫´u cho booking #{booking[0]}")
        else:
            print("\n‚ö†Ô∏è  Kh√¥ng c√≥ booking n√†o ƒë·ªÉ test")
            
        conn.close()
    except Exception as e:
        print(f"‚ö†Ô∏è  Kh√¥ng th·ªÉ th√™m d·ªØ li·ªáu m·∫´u: {e}")

if __name__ == "__main__":
    print("üöÄ B·∫Øt ƒë·∫ßu t·∫°o b·∫£ng booking_status_history...")
    print("=" * 70)
    
    if create_booking_status_history_table():
        check_existing_history()
        
        # H·ªèi user c√≥ mu·ªën th√™m d·ªØ li·ªáu m·∫´u kh√¥ng
        response = input("\n‚ùì B·∫°n c√≥ mu·ªën th√™m d·ªØ li·ªáu m·∫´u ƒë·ªÉ test kh√¥ng? (y/n): ")
        if response.lower() == 'y':
            add_sample_data()
            
        print("\n‚úÖ Ho√†n th√†nh! B·∫£ng booking_status_history ƒë√£ s·∫µn s√†ng s·ª≠ d·ª•ng.")
        print("üìå B·∫£ng n√†y s·∫Ω t·ª± ƒë·ªông l∆∞u l·ªãch s·ª≠ m·ªói khi admin thay ƒë·ªïi status booking.")
    else:
        print("\n‚ùå C√≥ l·ªói x·∫£y ra khi t·∫°o b·∫£ng.")